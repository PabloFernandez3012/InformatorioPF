# =============================================================================
# IMPORTACIONES NECESARIAS
# =============================================================================
from django.shortcuts import render, redirect, get_object_or_404  # Funciones para renderizar templates y redireccionar
from django.contrib.auth.forms import AuthenticationForm  # Formulario predefinido para login
from django.contrib.auth.models import User  # Modelo de usuario de Django
from django.contrib.auth import login, logout, authenticate  # Funciones para manejo de autenticaci√≥n
from django.contrib.auth.decorators import login_required  # Decorador para requerir login
from django.db import IntegrityError  # Excepci√≥n para errores de base de datos
from .models import Juego, Resena  # Nuestros modelos personalizados
from .forms import FormularioRegistroPersonalizado  # Formulario personalizado de registro
from django.contrib import messages  # Para mostrar mensajes de √©xito/error
import requests  # Para hacer peticiones HTTP a APIs externas
from datetime import datetime  # Para manejo de fechas
from functools import wraps  # Para crear decoradores personalizados
from django.core.cache import cache  # Para cachear datos y mejorar rendimiento
from django.core.paginator import Paginator  # Para paginaci√≥n de resultados


# =============================================================================
# DECORADOR PERSONALIZADO PARA USUARIOS NORMALES
# =============================================================================
def usuarios_normales_required(view_func):
    """
    Decorador que permite acceso solo a usuarios normales (no superusuarios).
    Los superusuarios son redirigidos al panel de administraci√≥n.
    """
    @wraps(view_func)
    def _wrapped_view(request, *args, **kwargs):
        if not request.user.is_authenticated:
            # Si no est√° autenticado, redirigir al login
            return redirect('entrar')
        
        if request.user.is_superuser:
            # Si es superusuario, redirigir al admin
            return redirect('/admin/')
        
        # Si es usuario normal, permitir acceso
        return view_func(request, *args, **kwargs)
    
    return _wrapped_view


# =============================================================================
# FUNCI√ìN PARA OBTENER NOTICIAS DE VIDEOJUEGOS
# =============================================================================
def obtener_noticias_gaming():
    """
    Obtiene noticias de videojuegos de forma priorizada con cach√© para mejorar rendimiento:
    1. Noticias de la base de datos (administrables desde Django Admin)
    2. Noticias RSS de sitios gaming espa√±oles
    3. Noticias predefinidas como fallback
    """
    # OPTIMIZACI√ìN: Intentar obtener noticias desde cach√© primero
    cache_key = 'noticias_gaming'
    noticias_cached = cache.get(cache_key)
    
    if noticias_cached:
        print("‚úÖ Usando noticias desde cach√© (m√°s r√°pido)")
        return noticias_cached
    
    try:
        # PRIORIDAD 1: Noticias desde la base de datos
        noticias_db = obtener_noticias_base_datos()
        if noticias_db and len(noticias_db) > 0:
            print(f"‚úÖ Usando {len(noticias_db)} noticias de la base de datos")
            # Cachear por 5 minutos si hay noticias de BD
            cache.set(cache_key, noticias_db, 300)
            return noticias_db
        
        # PRIORIDAD 2: Intentar obtener noticias reales de RSS feeds
        noticias_rss = obtener_noticias_rss()
        if noticias_rss and len(noticias_rss) > 0:
            print(f"‚úÖ Usando {len(noticias_rss)} noticias de RSS feeds")
            # Cachear por 15 minutos si son RSS (m√°s tiempo porque son externas)
            cache.set(cache_key, noticias_rss, 900)
            return noticias_rss
        
        # FALLBACK: Usar noticias predefinidas
        print("üì∞ Usando noticias predefinidas como fallback")
        noticias_demo = obtener_noticias_demo()
        # Cachear noticias demo por 30 minutos
        cache.set(cache_key, noticias_demo, 1800)
        return noticias_demo
            
    except Exception as e:
        print(f"Error obteniendo noticias: {e}")
        return obtener_noticias_demo()  # Fallback a datos demo


def obtener_noticias_base_datos():
    """
    Obtiene noticias desde la base de datos de forma optimizada.
    Estas noticias se pueden gestionar desde el panel de administraci√≥n de Django.
    """
    try:
        from .models import Noticia
        
        # OPTIMIZACI√ìN: Solo obtener los campos necesarios y usar select_related si hay FK
        noticias = Noticia.objects.filter(
            activa=True, 
            destacada=True
        ).only(
            'titulo', 'descripcion', 'url', 'imagen_url', 'fuente', 'fecha_publicacion'
        ).order_by('-fecha_publicacion')[:4]
        
        if not noticias.exists():
            return []
        
        # Convertir a formato compatible con el template
        noticias_formateadas = []
        for noticia in noticias:
            noticia_data = {
                'title': noticia.titulo,
                'description': noticia.descripcion,
                'url': noticia.url,
                'urlToImage': noticia.imagen_url or f"https://via.placeholder.com/400x200/667eea/ffffff?text={noticia.fuente.replace(' ', '+')}",
                'source': {'name': noticia.fuente},
                'publishedAt': noticia.fecha_publicacion.strftime('%Y-%m-%dT%H:%M:%SZ')
            }
            noticias_formateadas.append(noticia_data)
        
        return noticias_formateadas
        
    except Exception as e:
        print(f"Error obteniendo noticias de BD: {e}")
        return []


def obtener_noticias_rss():
    """
    Obtiene noticias reales de videojuegos desde feeds RSS de sitios gaming espa√±oles.
    Retorna noticias actuales que se pueden abrir y leer.
    """
    try:
        import feedparser
        from datetime import datetime
        import re
        
        # Lista de feeds RSS de sitios gaming espa√±oles confiables
        feeds_gaming = [
            {
                'url': 'https://vandal.elespanol.com/rss/noticias',
                'source': 'Vandal',
                'max_noticias': 2
            },
            {
                'url': 'https://www.3djuegos.com/rss/noticias/',
                'source': '3DJuegos', 
                'max_noticias': 2
            },
            {
                'url': 'https://www.hobbyconsolas.com/rss/videojuegos/noticias',
                'source': 'HobbyConsolas',
                'max_noticias': 1
            },
            {
                'url': 'https://www.vidaextra.com/rss',
                'source': 'VidaExtra',
                'max_noticias': 1
            }
        ]
        
        todas_las_noticias = []
        
        for feed_info in feeds_gaming:
            try:
                print(f"Obteniendo noticias de {feed_info['source']}...")
                
                # Parsear el feed RSS
                feed = feedparser.parse(feed_info['url'])
                
                # Verificar que el feed se haya parseado correctamente
                if not hasattr(feed, 'entries') or len(feed.entries) == 0:
                    print(f"No se pudieron obtener entradas de {feed_info['source']}")
                    continue
                
                # Procesar las entradas del feed
                for i, entry in enumerate(feed.entries[:feed_info['max_noticias']]):
                    try:
                        # Limpiar el t√≠tulo
                        titulo = entry.title if hasattr(entry, 'title') else 'Sin t√≠tulo'
                        titulo = re.sub(r'<[^>]*>', '', titulo)  # Remover HTML
                        
                        # Obtener descripci√≥n
                        descripcion = ''
                        if hasattr(entry, 'summary'):
                            descripcion = entry.summary
                        elif hasattr(entry, 'description'):
                            descripcion = entry.description
                        else:
                            descripcion = 'No disponible'
                        
                        # Limpiar descripci√≥n de HTML
                        descripcion = re.sub(r'<[^>]*>', '', descripcion)
                        descripcion = descripcion.strip()
                        
                        # Obtener URL de la noticia
                        url_noticia = entry.link if hasattr(entry, 'link') else '#'
                        
                        # Obtener fecha de publicaci√≥n
                        fecha_pub = datetime.now().strftime('%Y-%m-%dT%H:%M:%SZ')
                        if hasattr(entry, 'published_parsed') and entry.published_parsed:
                            try:
                                fecha_obj = datetime(*entry.published_parsed[:6])
                                fecha_pub = fecha_obj.strftime('%Y-%m-%dT%H:%M:%SZ')
                            except:
                                pass
                        
                        # Obtener imagen si est√° disponible
                        imagen_url = None
                        if hasattr(entry, 'media_thumbnail') and entry.media_thumbnail:
                            imagen_url = entry.media_thumbnail[0]['url']
                        elif hasattr(entry, 'enclosures') and entry.enclosures:
                            for enclosure in entry.enclosures:
                                if 'image' in enclosure.get('type', ''):
                                    imagen_url = enclosure.get('href')
                                    break
                        
                        # URL de imagen por defecto con el nombre del sitio
                        if not imagen_url:
                            color_map = {
                                'Vandal': '667eea',
                                '3DJuegos': '764ba2', 
                                'HobbyConsolas': 'ff6b6b',
                                'VidaExtra': 'ee5a24'
                            }
                            color = color_map.get(feed_info['source'], '667eea')
                            imagen_url = f"https://via.placeholder.com/400x200/{color}/ffffff?text={feed_info['source']}"
                        
                        # Crear objeto noticia compatible con el template
                        noticia = {
                            'title': titulo,
                            'description': descripcion,
                            'url': url_noticia,
                            'urlToImage': imagen_url,
                            'source': {'name': feed_info['source']},
                            'publishedAt': fecha_pub
                        }
                        
                        todas_las_noticias.append(noticia)
                        print(f"‚úì Noticia a√±adida: {titulo[:50]}...")
                        
                    except Exception as entry_error:
                        print(f"Error procesando entrada de {feed_info['source']}: {entry_error}")
                        continue
                        
            except Exception as feed_error:
                print(f"Error obteniendo feed de {feed_info['source']}: {feed_error}")
                continue
        
        # Ordenar por fecha (m√°s recientes primero) y limitar a 4
        if todas_las_noticias:
            todas_las_noticias.sort(key=lambda x: x['publishedAt'], reverse=True)
            resultado = todas_las_noticias[:4]
            print(f"‚úÖ Total de noticias obtenidas: {len(resultado)}")
            return resultado
        else:
            print("‚ùå No se pudieron obtener noticias de ning√∫n feed RSS")
            return []
            
    except ImportError:
        print("‚ùå feedparser no est√° instalado. Usa: pip install feedparser")
        return []
    except Exception as e:
        print(f"‚ùå Error general obteniendo noticias RSS: {e}")
        return []


def obtener_noticias_demo():
    """
    Noticias reales de videojuegos con URLs funcionales.
    Estas noticias se actualizan manualmente para mantener contenido relevante.
    """
    from datetime import datetime, timedelta
    
    # Generar fechas recientes realistas
    hoy = datetime.now()
    ayer = hoy - timedelta(days=1)
    hace_2_dias = hoy - timedelta(days=2)
    hace_3_dias = hoy - timedelta(days=3)
    
    # Noticias reales con URLs que funcionan y llevan a contenido real
    noticias_reales = [
        {
            'title': 'üìö Gu√≠as completas de videojuegos - Todo lo que necesitas saber',
            'description': 'Descubre las mejores gu√≠as de videojuegos para dominar tus t√≠tulos favoritos. Desde walkthroughs completos hasta trucos secretos, mapas interactivos y estrategias avanzadas. Encuentra gu√≠as detalladas para los juegos m√°s populares de PlayStation, Xbox, Nintendo Switch y PC.',
            'urlToImage': 'https://via.placeholder.com/400x200/667eea/ffffff?text=Guias+Gaming',
            'url': 'https://vandal.elespanol.com/guias/',
            'source': {'name': 'Vandal Gaming'},
            'publishedAt': hoy.strftime('%Y-%m-%dT%H:%M:%SZ')
        },
        {
            'title': 'üî• Noticias destacadas de Steam - √öltimas actualizaciones gaming',
            'description': 'Mantente al d√≠a con las √∫ltimas noticias de Steam. Descubre nuevos lanzamientos, actualizaciones de juegos, ofertas especiales, eventos de temporada y las novedades m√°s importantes de la plataforma gaming m√°s popular del mundo. Todo lo que necesitas saber sobre el ecosistema Steam.',
            'urlToImage': 'https://via.placeholder.com/400x200/764ba2/ffffff?text=Steam+News',
            'url': 'https://store.steampowered.com/news/collection/featured/',
            'source': {'name': 'Steam News'},
            'publishedAt': ayer.strftime('%Y-%m-%dT%H:%M:%SZ')
        },
        {
            'title': 'üí∞ Rebajas y ofertas especiales de Steam - Los mejores descuentos',
            'description': 'Descubre las mejores ofertas y rebajas de Steam con descuentos incre√≠bles en miles de juegos. Desde t√≠tulos AAA hasta indies destacados, encuentra los mejores precios en los juegos m√°s vendidos. No te pierdas estas oportunidades √∫nicas con descuentos de hasta el 90%.',
            'urlToImage': 'https://via.placeholder.com/400x200/ff6b6b/ffffff?text=Steam+Ofertas',
            'url': 'https://store.steampowered.com/specials#tab=TopSellers',
            'source': {'name': 'Steam Store'},
            'publishedAt': hace_2_dias.strftime('%Y-%m-%dT%H:%M:%SZ')
        },
        {
            'title': 'üíª Steam: Los juegos m√°s populares de 2025',
            'description': 'Descubre los juegos m√°s populares y mejor valorados de Steam en 2025. Desde indies innovadores hasta blockbusters AAA, conoce qu√© est√° jugando la comunidad gaming mundial y cu√°les son las pr√≥ximas grandes promesas.',
            'urlToImage': 'https://via.placeholder.com/400x200/ee5a24/ffffff?text=Steam+Popular+2025',
            'url': 'https://store.steampowered.com/charts/',
            'source': {'name': 'Steam Store'},
            'publishedAt': hace_3_dias.strftime('%Y-%m-%dT%H:%M:%SZ')
        }
    ]
    
    return noticias_reales


# =============================================================================
# VISTA PRINCIPAL - P√ÅGINA DE INICIO
# =============================================================================
def home(request):
    """
    Vista que renderiza la p√°gina principal del sitio.
    Ahora incluye noticias de videojuegos para hacer la p√°gina m√°s atractiva.
    """
    # Obtener noticias de gaming
    noticias = obtener_noticias_gaming()
    
    context = {
        'noticias': noticias
    }
    return render(request, 'home.html', context)


# =============================================================================
# VISTA DE REGISTRO DE USUARIOS
# =============================================================================
def signup(request):
    """
    Vista para registrar nuevos usuarios con validaciones personalizadas.
    - GET: Muestra el formulario vac√≠o
    - POST: Procesa el registro y valida los datos
    """
    if request.method == 'GET':
        # Si es GET, mostrar formulario vac√≠o de registro
        return render(request, 'signup.html', {'form': FormularioRegistroPersonalizado()})
    else:
        # Si es POST, procesar los datos del formulario
        form = FormularioRegistroPersonalizado(request.POST)
        if form.is_valid():
            # Si el formulario es v√°lido, intentar crear el usuario
            try:
                user = form.save()  # Guardar el usuario en la base de datos
                
                # Asegurarse de que los usuarios registrados p√∫blicamente no sean superusuarios
                user.is_superuser = False
                user.is_staff = False
                user.save()
                
                login(request, user)  # Iniciar sesi√≥n autom√°ticamente
                return redirect('tareas')  # Redirigir a la p√°gina de juegos
            except IntegrityError:
                # Si hay error de integridad (ej: usuario duplicado)
                return render(request, 'signup.html', {
                    'form': FormularioRegistroPersonalizado(), 
                    "error": "Error al crear el usuario. Intenta de nuevo."
                })
        else:
            # Si el formulario no es v√°lido, mostrar errores
            return render(request, 'signup.html', {'form': form})
    
    # Fallback en caso de error inesperado
    return render(request, 'signup.html', {'form': FormularioRegistroPersonalizado()})


# =============================================================================
# VISTA DE LISTA DE JUEGOS CON B√öSQUEDA Y FILTROS
# =============================================================================
def tareas(request):
    """
    Vista que muestra todos los juegos disponibles con capacidad de b√∫squeda y filtrado.
    Permite filtrar por:
    - Nombre del juego (b√∫squeda de texto)
    - Categor√≠a
    - Estudio desarrollador
    - A√±o de publicaci√≥n
    """
    # Importar el modelo aqu√≠ para evitar problemas de importaci√≥n circular
    from .models import Categoria
    
    # OPTIMIZACI√ìN: Usar prefetch_related para reducir consultas N+1
    juegos = Juego.objects.prefetch_related('categorias').all()
    
    # ===== OBTENER PAR√ÅMETROS DE B√öSQUEDA Y FILTROS =====
    busqueda = request.GET.get('busqueda', '')  # Texto de b√∫squeda
    categoria_filtro = request.GET.get('categoria', '')  # Filtro por categor√≠a
    estudio_filtro = request.GET.get('estudio', '')  # Filtro por estudio
    ano_filtro = request.GET.get('ano', '')  # Filtro por a√±o
    
    # ===== APLICAR FILTRO DE B√öSQUEDA POR NOMBRE =====
    if busqueda:
        # Filtrar juegos que contengan el texto de b√∫squeda en el nombre (insensible a may√∫sculas)
        juegos = juegos.filter(nombre__icontains=busqueda)
    
    # ===== APLICAR FILTRO POR CATEGOR√çA =====
    if categoria_filtro:
        # Filtrar juegos que tengan la categor√≠a seleccionada
        juegos = juegos.filter(categorias__nombre=categoria_filtro)
    
    # ===== APLICAR FILTRO POR ESTUDIO =====
    if estudio_filtro:
        # Filtrar juegos del estudio seleccionado (insensible a may√∫sculas)
        juegos = juegos.filter(estudio__icontains=estudio_filtro)
    
    # ===== APLICAR FILTRO POR A√ëO =====
    if ano_filtro:
        try:
            # Filtrar juegos publicados en el a√±o especificado
            juegos = juegos.filter(fecha_publicacion__year=int(ano_filtro))
        except ValueError:
            # Si el a√±o no es v√°lido, ignorar el filtro
            pass
    
    # ===== REMOVER DUPLICADOS (en caso de m√∫ltiples categor√≠as) =====
    juegos = juegos.distinct()
    
    # ===== OBTENER DATOS PARA LOS FILTROS (OPTIMIZADO) =====
    # OPTIMIZACI√ìN: Usar cach√© para datos que cambian poco
    cache_key_filtros = 'datos_filtros_juegos'
    datos_filtros = cache.get(cache_key_filtros)
    
    if not datos_filtros:
        # Lista de todas las categor√≠as disponibles para el filtro
        todas_categorias = list(Categoria.objects.all())
        
        # Lista de todos los estudios √∫nicos para el filtro
        todos_estudios = list(Juego.objects.values_list('estudio', flat=True).distinct().order_by('estudio'))
        
        # Lista de a√±os √∫nicos para el filtro
        todos_anos = Juego.objects.dates('fecha_publicacion', 'year', order='DESC')
        anos_lista = [fecha.year for fecha in todos_anos]
        
        datos_filtros = {
            'categorias': todas_categorias,
            'estudios': todos_estudios,
            'anos': anos_lista
        }
        
        # Cachear por 1 hora (los datos de filtros no cambian frecuentemente)
        cache.set(cache_key_filtros, datos_filtros, 3600)
        print("‚úÖ Datos de filtros guardados en cach√©")
    else:
        print("‚úÖ Usando datos de filtros desde cach√©")
    
    # ===== IMPLEMENTAR PAGINACI√ìN PARA MEJORAR RENDIMIENTO =====
    paginator = Paginator(juegos, 12)  # Mostrar 12 juegos por p√°gina
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)
    
    # ===== PREPARAR CONTEXTO PARA EL TEMPLATE =====
    contexto = {
        'juegos': page_obj,  # Usar page_obj en lugar de juegos para paginaci√≥n
        'page_obj': page_obj,  # Objeto de paginaci√≥n para controles
        'busqueda_actual': busqueda,
        'categoria_actual': categoria_filtro,
        'estudio_actual': estudio_filtro,
        'ano_actual': ano_filtro,
        'todas_categorias': datos_filtros['categorias'],
        'todos_estudios': datos_filtros['estudios'],
        'todos_anos': datos_filtros['anos'],
        'total_resultados': paginator.count,  # Total de resultados sin paginar
    }
    
    return render(request, 'tareas.html', contexto)


# =============================================================================
# VISTA DE CERRAR SESI√ìN
# =============================================================================
def cerrar_sesion(request):
    """
    Vista para cerrar la sesi√≥n del usuario actual.
    Cierra la sesi√≥n y redirige a la p√°gina principal.
    """
    logout(request)  # Cerrar la sesi√≥n del usuario
    return redirect('home')  # Redirigir a la p√°gina principal


# =============================================================================
# VISTA DE INICIO DE SESI√ìN
# =============================================================================
def entrar(request):
    """
    Vista para que los usuarios existentes inicien sesi√≥n.
    - GET: Muestra el formulario de login
    - POST: Procesa las credenciales y autentica al usuario
    - Superusuarios son redirigidos autom√°ticamente al panel de administraci√≥n
    """
    if request.method == 'GET':
        # Si es GET, mostrar formulario de login vac√≠o
        return render(request, 'entrar.html', {'form': AuthenticationForm()})
    else:
        # Si es POST, procesar las credenciales
        user = authenticate(
            request, 
            username=request.POST['username'], 
            password=request.POST['password']
        )
        if user is None:
            # Si las credenciales son incorrectas
            return render(request, 'entrar.html', {
                'form': AuthenticationForm(), 
                'error': 'Usuario o contrase√±a incorrectos'
            })
        else:
            # Si las credenciales son correctas
            login(request, user)  # Iniciar sesi√≥n
            
            # Verificar si es superusuario
            if user.is_superuser:
                # Redirigir superusuarios al panel de administraci√≥n
                return redirect('/admin/')
            else:
                # Redirigir usuarios normales a la p√°gina de juegos
                return redirect('tareas')


# =============================================================================
# VISTA DE DETALLE DE JUEGO
# =============================================================================
def detalle_juego(request, juego_id):
    """
    Vista que muestra los detalles de un juego espec√≠fico y sus rese√±as.
    - Muestra informaci√≥n del juego
    - Lista todas las rese√±as del juego
    - Verifica si el usuario ya hizo una rese√±a (para mostrar/ocultar bot√≥n)
    """
    # Obtener el juego o mostrar error 404 si no existe
    juego = get_object_or_404(Juego, id=juego_id)
    
    # Obtener todas las rese√±as del juego ordenadas por fecha (m√°s recientes primero)
    resenas = juego.resenas.all().order_by('-fecha_creacion')
    
    # Verificar si el usuario actual ya hizo una rese√±a de este juego
    usuario_ya_reseno = False
    if request.user.is_authenticated:
        usuario_ya_reseno = Resena.objects.filter(juego=juego, usuario=request.user).exists()
    
    # Pasar toda la informaci√≥n al template
    return render(request, 'detalle_juego.html', {
        'juego': juego,
        'resenas': resenas,
        'usuario_ya_reseno': usuario_ya_reseno
    })


# =============================================================================
# VISTA DE CREAR RESE√ëA (REQUIERE LOGIN)
# =============================================================================
@login_required  # Decorador que requiere que el usuario est√© autenticado
def crear_resena(request, juego_id):
    """
    Vista para crear una nueva rese√±a de un juego.
    Solo usuarios autenticados pueden acceder.
    Previene rese√±as duplicadas del mismo usuario para el mismo juego.
    """
    # Obtener el juego o mostrar error 404 si no existe
    juego = get_object_or_404(Juego, id=juego_id)
    
    # Verificar si el usuario ya hizo una rese√±a de este juego
    if Resena.objects.filter(juego=juego, usuario=request.user).exists():
        # Si ya existe una rese√±a, redirigir al detalle del juego
        return redirect('detalle_juego', juego_id=juego.id)
    
    if request.method == 'POST':
        # Si es POST, procesar los datos de la rese√±a
        puntuacion = request.POST.get('puntuacion')
        comentario = request.POST.get('comentario')
        
        if puntuacion and comentario:
            # Si se proporcionaron puntuaci√≥n y comentario, crear la rese√±a
            Resena.objects.create(
                juego=juego,
                usuario=request.user,
                puntuacion=int(puntuacion),
                comentario=comentario
            )
            # Redirigir al detalle del juego para ver la nueva rese√±a
            return redirect('detalle_juego', juego_id=juego.id)
    
    # Si es GET o faltan datos, mostrar el formulario de crear rese√±a
    return render(request, 'crear_resena.html', {'juego': juego})


# =============================================================================
# PERFIL Y CONFIGURACI√ìN DE USUARIO
# =============================================================================

@usuarios_normales_required
def perfil_usuario(request):
    """
    Vista que muestra el perfil del usuario autenticado.
    Incluye informaci√≥n personal y todas las rese√±as que ha escrito.
    Solo accesible para usuarios normales (no superusuarios).
    """
    # Obtener todas las rese√±as del usuario actual, ordenadas por fecha m√°s reciente
    rese√±as_usuario = Resena.objects.filter(usuario=request.user).order_by('-fecha_creacion')
    
    # Calcular estad√≠sticas del usuario
    total_rese√±as = rese√±as_usuario.count()
    
    # Preparar contexto para el template
    context = {
        'rese√±as_usuario': rese√±as_usuario,
        'total_rese√±as': total_rese√±as,
        'usuario': request.user,
    }
    
    return render(request, 'perfil_usuario.html', context)


@usuarios_normales_required
def configuracion_usuario(request):
    """
    Vista que permite al usuario cambiar su contrase√±a.
    Muestra formulario para cambio de contrase√±a con validaciones.
    Solo accesible para usuarios normales (no superusuarios).
    """
    if request.method == 'POST':
        # Obtener datos del formulario
        contrase√±a_actual = request.POST.get('contrase√±a_actual')
        nueva_contrase√±a = request.POST.get('nueva_contrase√±a')
        confirmar_contrase√±a = request.POST.get('confirmar_contrase√±a')
        
        # Lista para almacenar errores
        errores = []
        
        # ===== VALIDACIONES =====
        
        # 1. Verificar que la contrase√±a actual sea correcta
        if not request.user.check_password(contrase√±a_actual):
            errores.append('La contrase√±a actual es incorrecta.')
        
        # 2. Verificar que las nuevas contrase√±as coincidan
        if nueva_contrase√±a != confirmar_contrase√±a:
            errores.append('Las nuevas contrase√±as no coinciden.')
        
        # 3. Verificar longitud m√≠nima de la nueva contrase√±a
        if len(nueva_contrase√±a) < 8:
            errores.append('La nueva contrase√±a debe tener al menos 8 caracteres.')
        
        # 4. Verificar que no sea demasiado simple
        if nueva_contrase√±a.isdigit():
            errores.append('La contrase√±a no puede ser solo n√∫meros.')
        
        # 5. Verificar que no sea igual a la actual
        if request.user.check_password(nueva_contrase√±a):
            errores.append('La nueva contrase√±a debe ser diferente a la actual.')
        
        # Si no hay errores, cambiar la contrase√±a
        if not errores:
            request.user.set_password(nueva_contrase√±a)
            request.user.save()
            
            # Actualizar la sesi√≥n para que no se cierre autom√°ticamente
            from django.contrib.auth import update_session_auth_hash
            update_session_auth_hash(request, request.user)
            
            # Mensaje de √©xito
            messages.success(request, '¬°Contrase√±a cambiada exitosamente!')
            return redirect('configuracion')
        else:
            # Si hay errores, mostrarlos
            for error in errores:
                messages.error(request, error)
    
    return render(request, 'configuracion_usuario.html')


# =============================================================================
# VISTA ACERCA DE - INFORMACI√ìN DEL DESARROLLADOR
# =============================================================================
def acerca_de(request):
    """
    Vista que renderiza la p√°gina con informaci√≥n sobre el desarrollador
    y el proyecto del Informatorio Chaco.
    """
    context = {
        'desarrollador': 'Pablo Javier Fernandez',
        'institucion': 'Informatorio Chaco',
        'proyecto': 'Plataforma de Rese√±as de Videojuegos',
        'a√±o': '2025'
    }
    return render(request, 'acerca_de.html', context)


# =============================================================================
# VISTA PARA EDITAR RESE√ëA (REQUIERE LOGIN)
# =============================================================================
@login_required  # Decorador que requiere que el usuario est√© autenticado
def editar_resena(request, resena_id):
    """
    Vista para editar una rese√±a existente.
    Solo el autor de la rese√±a puede editarla.
    Permite modificar tanto la puntuaci√≥n como el comentario.
    """
    # Obtener la rese√±a o mostrar error 404 si no existe
    resena = get_object_or_404(Resena, id=resena_id)
    
    # Verificar que el usuario actual sea el autor de la rese√±a
    if resena.usuario != request.user:
        messages.error(request, 'No tienes permiso para editar esta rese√±a.')
        return redirect('detalle_juego', juego_id=resena.juego.id)
    
    if request.method == 'POST':
        # Si es POST, procesar los datos actualizados de la rese√±a
        puntuacion = request.POST.get('puntuacion')
        comentario = request.POST.get('comentario')
        
        if puntuacion and comentario:
            # Validar que la puntuaci√≥n est√© en el rango correcto
            try:
                puntuacion_int = int(puntuacion)
                if 1 <= puntuacion_int <= 5:
                    # Actualizar la rese√±a
                    resena.puntuacion = puntuacion_int
                    resena.comentario = comentario
                    resena.save()
                    
                    messages.success(request, '¬°Rese√±a actualizada exitosamente!')
                    return redirect('detalle_juego', juego_id=resena.juego.id)
                else:
                    messages.error(request, 'La puntuaci√≥n debe estar entre 1 y 5.')
            except ValueError:
                messages.error(request, 'La puntuaci√≥n debe ser un n√∫mero v√°lido.')
        else:
            messages.error(request, 'Todos los campos son obligatorios.')
    
    # Si es GET o hay errores, mostrar el formulario de edici√≥n
    return render(request, 'editar_resena.html', {
        'resena': resena,
        'juego': resena.juego
    })

# =============================================================================
